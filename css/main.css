/* COMMON */
.body__container {
    font-family: 'Roboto', sans-serif;
    font-size: 16px;
    font-weight: 400; 
    color: #333;
}
a{
    text-decoration: none;
}

/* ------BTN 설정값 미리 만들기------- */
.btn {
    height: 34px;
    background: #eee linear-gradient(to bottom,#fcfcfc, #eee);
    border: 1px solid #d5d5d5;
    border-radius: 4px;
    display: flex;
    align-items: center;
    padding: 0 12px;
    font-size: 14px;
    font-weight: 500;
    line-height: 1.5;
    cursor: pointer;
    box-sizing: border-box;
    position: relative;
    color: #333;
}
.btn:hover::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.07);
}

.btn.btn--primary {
    border: 1px solid #65b836;
    color: #fff;
    background: #55a532 linear-gradient(#91dd70, #55ae2e);
}

/* 입력양식 설정 INPUT TEXT*/
.input--text {
    height: 34px;
    padding: 0 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    box-sizing: border-box;
    outline: none;
    /*box-shadow inset을 사용하면 box 내부에 그림자를 만들수 있다. */
    box-shadow: inset 0 1px 2px rgba(0,0,0,0.075);
    font-size: 16px;
}
/* input에 포커스를 두고 있다는 것을 보여주는 코드 */
.input--text:focus {
    border-color: #51a7e8;
    /* 포커스가 될때 버튼 바깥쪽에 그림자를 만들려고 할때 그냥 그림자를 만들어버리면
       위에서 만든 내부그림자가 덮어져서 보이지 않게 된다.
       그러므로 inset을 이용해 위와 똑같은 내부 그림자를 하나 만들고 , 를 써서 외부 그림자를
       하나 만들어준다.
       그러면 내부, 외부 그림자 모두 보이게 된다.
       ,(쉼표)를 통해 다중의 그림자를 설정할 수 있다고 알면 된다.
    */
    box-shadow: inset 0 1px 2px rgba(0,0,0,0.075),
                 0 0 5px rgba(81,167,232,0.5);
}
/* Vendor Prefix(브라우저 업체별 접두사)
   chrome: -webkit
   Internet Explore:-ms
   mozila: -moz
*/
.input--text::-webkit-input-placeholder {
    color: #cacaca;
}
.input--text::-ms-input-placeholder {
    color: #cacaca;
}
.input--text::-moz-input-placeholder {
    color: #cacaca;
}

/* FLOAT CLEARFIX */
/* Float 구조를 미리 정의해 놓으면 굳이 css구조를 건들이지 않고도 손쉽게 float을 해제시킬 수 있는 편리함이 있다. */
.clearfix::after {
    content: "";
    clear: both;
    display: block;
}

.float--left {
    float: left;
}

.float--right {
    float: right;
}

/* SUMMARY */
.summary {

}
.summary__title {
    font-size: 38px;
    font-weight: 300;
    line-height: 1.25;
    margin-bottom: 18px;
}

.summary__description{
    font-size: 26px;
    font-weight: 300;
    color: #767676;
    line-height: 1.5;
}

/* SECTION & INNER */
/* SECTION, INNER의 내용이 중복이 되고 나중에 SECTION의 내용이 변경되거나 수정되야 할때
   편하게 유지보수를 할 수 있도록 만들어 준다.
*/
.section {
    /* 특정 컨텐츠는 inner에만 만드는게 아니기 때문에 section에도 position을 지정해준다. */
    position: relative;
}

.section .inner {
    max-width: 980px;
    margin: 0 auto;
    box-sizing: border-box;
    position: relative;
}


/* HEADER */

header {
    border-bottom: 1px solid rgba(0,0,0,.75);
    box-shadow: 0 0 5px rgba(0,0,0,.75);
    background: #fff;
}

header .inner {
    /* margin: 0 auto를 사용하여 가운데 정렬을 시도하려면
       꼭 가로 사이즈가 정의되있어야 한다.
    */
    margin: 0 auto;
    padding: 16px 8px;
    box-sizing: border-box;
}

header .menu-group {
    display: flex;
    align-items: center;
    height: 100%;
}
header .logo {
    margin-right: 10px;
}

header .logo a {
    background: url("../img/logo.svg");
    width: 32px;
    height: 32px;
    display: block;
    /* a태그의 대체 텍스트인 GitHub을 화면 밖으로 밀어서 구조적으로는 남아있게 하기 
       -9999라고 한 이유는 텍스트를 사라지게 한 표시 같은 약속 같은 개념
    */
    text-indent: -9999px;
}

header .logo a:hover {
    background: url("../img/logo_on.svg");
}


header .main-menu {
    display: flex;
}

header .main-menu li a{
    display: block;
    padding: 10px;
    color: #3c4146;
}

header .main-menu li a:hover {
    color: #4078c0;
}

header .sign-group {
    display: flex;
    align-items: center;
    height: 100%;
}

header .btn-group {
    order: 2;
    display: flex;
}

header .btn-group .sign-in {
    margin-right: 4px;
}

#search-form {
    order: 1;
    margin-right: 12px;
}

#search {
    width: 160px;
    font-size: 14px;
}
/* + => 바로 다음의 형제 선택자 []=> 속성 선택자 */
#search + [type="submit"]{
    display: none;
}

header .sub-menu {
    display: flex;
    margin-right: 10px;
}

header .sub-menu li a {
    display: inline-block;
    padding: 8px;
    font-size: 13px;
    color: #3c4146;
}

header .sub-menu li a:hover {
    color: #4078c0;
}
#toggle-btn {
    display: none;
    background: url("../img/toggle-btn.svg");
    width: 18px;
    height: 24px;
    position: absolute;
    top: 16px;
    right: 20px;
    cursor: pointer;
    text-indent: -9999px;
}


/* VISUAL */
.section--visual {
    background-image: url(../img/bg.jpg);
    background-repeat: no-repeat;
    background-position: bottom left;
    /* 화면이 축소 됐을때도 이미지가 잘리지 않도록 하기 */
    background-size: cover;
}

/* 기본 visual 배경은 조금 밝은 편이다.
   코드로 글자 뒷부분 배경(즉 이미지 앞에)을 조금 어둡게 만들면
   시각적으로 좀 더 어두운 배경을 만들 수 있다.
*/
/* 모든 방향에 0을 주고  부모요소 기준(position:absolute)으로 배치를 해주면
   가로 사이즈 100% 세로 사이즈 100%와 동일한 효과를 가질 수 있다.
*/
.section--visual::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    background: rgba(0,0,0,.3);
}
.section--visual .inner {
    display: flex;
    padding: 160px 0;
}

.section--visual .summary {
    flex-grow: 1;
    flex-basis: 0;
    /* 단축 속성을 사용해 flex를 사용할 수있다
        flex: 1
     */
    margin-right: 90px;
}

.section--visual .summary__title {
    color: #fff;
    font-size: 54px;
    /* 글자에 그림자를 그려주는 기능 */
    text-shadow: 0 1px 1px rgba(0,0,0,.25), 
                 0 1px 25px rgba(0,0,0,.75);
}

.section--visual .summary__description{
    color: #fff;
    /* 글자에 그림자를 그려주는 기능 */
    text-shadow: 0 1px 1px rgba(0,0,0,.25), 
                 0 1px 25px rgba(0,0,0,.75);
}

#sign-form {
    width: 340px;
    margin-top: 16px;
}
#sign-form li {
    margin-bottom: 17px;
}
/* 마지막 li태그의 요소에는 margin-bottom이 굳이 들어가지 않아도 되서 0으로 수정해준다. */
#sign-form li:last-child {
    margin-bottom: 0;
}
#sign-form .input--text{
    width: 100%;
    height: 40px;
}
#sign-form .caption {
    font-size: 12px;
    margin-top: 5px;
    color: rgba(255, 255, 255, .6);
    line-height: 1.5;
    text-align: center;
}

#sign-form [type="submit"] {
    width: 100%;
    height: 62px;
    padding: 0 25px;
    font-size: 20px;
    /* btn의 속성이 display:inline-flex이기 때문에 text-align이 아닌 justify-content를 써줘야한다. */
    justify-content: center;
}

/* FEATURE */
.section--feature {
    background: #f5f5f5;
    padding-top: 66px;
}

.section--feature .summary {
    max-width: 820px;
    margin: 0 auto;
    text-align: center;
}

.section--feature .video {
    max-width: 650px;
    margin: 50px auto;
}
/* video-ratio요소에 높이를 0으로 없애주고 padding-top을 이용해서 영역을 만들어주는 이유는
   video도 반응형으로서 사이트가 줄어들어가 늘어날때 그 너비에 맞춰서 사이즈가 움직여야 하기 때문이다.
   height같은경우 px를 사용하면 높이가 고정이 되기 때문에 반응형을 만들때 좋지 않을 수 있다.
   padding속성에 %로 높이를 지정해주면 부모요소의 가로너비에 영향을 받는다.
   보통 유튜브 동영상은 크기가 16:9 기준이며 540:x = 16:9 로 4500 나누기 16x는 56.25%가 나온다 
*/
/*
    padding-top을 이용해 여백을 만들면 여백 밑에 동영상이 나오게 된다.
    동영상이 내가 만든 여백안에 들어가게 하려면 position을 사용해 주면 된다.

 */
.section--feature .video .video-ratio{
    height: 0;
    padding-top: 56.25%;
    position: relative;
}
/* top,left만 주면 부모 여백을 다 활용하지 못하기 때문에 너비,높이에 100%를 줘서
   부모요소의 모든 부분을 사용할 수 있도록 해준다.
*/
.section--feature .video .video-ratio iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

.section--feature .tiles {
    border-top: 1px solid #e5e5e5;
    border-bottom: 1px solid #e5e5e5;
}
.section--feature .tiles .inner{
    max-width: 1200px;
}
/* ul을 grid 컨테이너로 만든다. */
.section--feature .tiles ul {
    /* 그리드 속성 같은 경우 낮은 버전의 브라우저에서는 돌아가지 않기때문에 사용하지 못한다는 가정하에 만들어보자.
       display: grid;
       4개의 컬럼을 1대 1비율로 만든다.
       grid-template-columns: repeat(4, 1fr);
    */

}

.section--feature .tiles  li{
    padding: 34px 24px;
    text-align: center;
    line-height: 1.5;
    border-right: 1px solid #e5e5e5;
    box-sizing: border-box;
    /* grid 사용하지 않고 수평구조 만들어주기 
       float을 썼으면 부모요소에 clearfix가 있는지 꼭 확인해주기
       width(너비)는 4개 이미지를 한줄에 넣기 위해서 100%의 4등분 25%써주고
       사이즈를 컨트롤 할때는 25%를 50% 또는 100%로 변경해줘서 사용하면 된다.
    */
    float: left;
    width: 25%;
}

.section--feature .tiles  li:last-child{
    border-right: none;
}
/* 이미지는 반응형구조에 따라 크기가 스스로 변형되는 구조를 가져야한다.
   여기서는 width대신 max-width:100% 써주는 것과 padding: 50px 20% => 가로너비와 box-sizing:border-box를 사용해주는게 관건인거 같다.
*/
.section--feature .tiles  li img{
    max-width: 100%;
    /* padding: 위 좌우 아래 */
    padding: 14px 10% 24px;
    box-sizing: border-box;
}

.section--feature .tiles  h3{
    font-size: 18px;
    font-weight: 500;
    margin-bottom: 10px;
}

.section--feature .tiles  li p{
    font-size: 14px;
    color: #767676;
}



/* WHERE IS */
.section--where-is {

}

.section--where-is .inner{
    padding: 80px;
}

#map {
    width: 100%;
    height: 400px;
    margin-top: 40px;
    border: 1px solid rgba(0, 0, 0, .2);
    border-bottom: none;
    box-shadow: 0 0 20px rgba(0, 0, 0, .2);
    box-sizing: border-box;
}

/* PRICING CARD */
.section--pricing {
 background: linear-gradient(#f5f5f5,#fff);
}
.section--pricing .inner{
    padding: 80px 0;
}

.section--pricing .card{
    display: flex;
    border: 1px solid #e5e5e5;
    border-radius: 6px;
    box-sizing: border-box;
}

.section--pricing .cell{
    padding: 24px;
    display: flex;
    justify-content: center;
    align-items: center;
}
.section--pricing .cell1 .btn{
    height: 50px;
    font-size: 16px;
}
.section--pricing .cell2{
    font-size: 22px;
    font-weight: 300;
    line-height: 1.5;
    /* 버튼이 찌그러지는 현상을 flex를 이용해서 쉽게 처리할 수 있다.
       flex: 1;을 해주면 flex: 1 auto;의 auto값이 단축속성때문에 0으로 바뀐다.
    */
    flex: 1;
    border-left: 1px solid #e5e5e5;
}


/* FOOTER */
footer {

}
footer .inner{
    padding: 50px 0;
    border-top: 1px solid #eee;
}
footer .site-links {
    display: flex;
}
footer .site-links li{
    font-size: 12px;
    margin-right: 10px;
    color: #767676;
}

footer .site-links li a {
    color:#4078c0;
}
footer .site-links li a:hover {
    text-decoration: underline;
}

footer .logo {
    /* logo의 부모요소인 inner에 이미 position:relative가 공통속성에 지정되있어서 따로 안적어 줘도 된다.
       position부터 height까지 지정해주면 특정한 요소를 부모요소를 기준으로 하여 완벽한 가운데에 배치하는 개념으로
       사용할 수 있는 코드가 된다. 정렬이 아닌 배치라는게 키포인트이다.
    */
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    margin: auto;
    width: 24px;
    height: 24px;
}
footer .logo:hover svg {
    /* fill은 svg를 제어해주는 기능. svg를 채워주겠다 라고 생각하면 된다. */
    fill: #4078c0;
}

